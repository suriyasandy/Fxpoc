import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# Constants
BUSINESS_DAYS = 252

# Load and preprocess data
@st.cache_data
def load_and_process_data():
    # Load Reuters OHLC data with annualized volatility
    # Columns: Currency, Date, Open, High, Low, Close, OHLCVolatility
    df = pd.read_csv("reuters_fx_data.csv")
    
    # Convert to daily volatility
    df['DailyVolatility'] = df['OHLCVolatility'] / np.sqrt(BUSINESS_DAYS)
    
    # Dynamic grouping based on volatility quartiles
    df['Group'] = pd.qcut(df['OHLCVolatility'], 
                         q=4, 
                         labels=['Group 1', 'Group 2', 'Group 3', 'Group 4'])
    
    # Calculate group thresholds (example values - adjust based on your data distribution)
    group_thresholds = df.groupby('Group')['OHLCVolatility'].mean() * 2.5  # Threshold multiplier
    return df, group_thresholds

df, group_thresholds = load_and_process_data()

# Streamlit app
st.title("Dynamic FX Volatility Threshold Monitoring")
st.markdown("### Research-Backed Volatility Analysis Framework")

# Main tabs
tab1, tab2, tab3 = st.tabs(["Market Overview", "Cross-Currency Analysis", "Risk Simulation"])

with tab1:
    st.header("Market Volatility Landscape")
    
    # Volatility distribution visualization
    fig = px.histogram(df, x="OHLCVolatility", nbins=50, 
                      title="Annualized Volatility Distribution",
                      labels={"OHLCVolatility": "Annualized Volatility (%)"},
                      color_discrete_sequence=['#2A9D8F'])
    fig.update_layout(bargap=0.1)
    st.plotly_chart(fig, use_container_width=True)
    
    # Group thresholds table
    st.subheader("Dynamic Threshold Calculation")
    threshold_table = pd.DataFrame({
        'Group': group_thresholds.index,
        'Avg Volatility': group_thresholds.values / 2.5,
        'Calculated Threshold': group_thresholds.values
    })
    st.dataframe(threshold_table.style.format({
        'Avg Volatility': '{:.2f}%',
        'Calculated Threshold': '{:.2f}%'
    }), use_container_width=True)

with tab2:
    st.header("Cross-Currency Pair Analysis")
    
    col1, col2 = st.columns(2)
    with col1:
        base_ccy = st.selectbox("Base Currency", df['Currency'].unique(), index=0)
    with col2:
        quote_ccy = st.selectbox("Quote Currency", df['Currency'].unique(), index=1)
    
    # Get currency data
    base_data = df[df['Currency'] == base_ccy].iloc[0]
    quote_data = df[df['Currency'] == quote_ccy].iloc[0]
    
    # Determine threshold
    group_order = {'Group 1': 1, 'Group 2': 2, 'Group 3': 3, 'Group 4': 4}
    selected_group = max([base_data['Group'], quote_data['Group']], key=lambda x: group_order[x])
    threshold = group_thresholds[selected_group]
    
    # Visualization
    fig = go.Figure()
    fig.add_trace(go.Indicator(
        mode="number+gauge+delta",
        value=threshold,
        delta={'reference': threshold * 0.8, 'relative': False},
        domain={'x': [0.1, 1], 'y': [0.1, 0.5]},
        title={'text': f"{base_ccy}/{quote_ccy} Threshold"},
        gauge={
            'axis': {'range': [0, group_thresholds.max() * 1.2]},
            'bar': {'color': "#264653"},
            'steps': [
                {'range': [0, group_thresholds.median()], 'color': "#E9C46A"},
                {'range': [group_thresholds.median(), group_thresholds.max()], 'color': "#F4A261"}
            ]
        }
    ))
    st.plotly_chart(fig, use_container_width=True)
    
    # Pair analysis details
    st.subheader("Component Analysis")
    col1, col2 = st.columns(2)
    with col1:
        st.metric(f"{base_ccy} Volatility", 
                 f"{base_data['OHLCVolatility']:.2f}%", 
                 f"Group: {base_data['Group']}")
    with col2:
        st.metric(f"{quote_ccy} Volatility", 
                 f"{quote_data['OHLCVolatility']:.2f}%", 
                 f"Group: {quote_data['Group']}")

with tab3:
    st.header("Threshold Stress Testing")
    
    shock = st.slider("Shock Intensity (%)", -50, 200, 0, 10)
    scenario_type = st.selectbox("Scenario Type", 
                                ["Historical Parallel", "Extreme Value", "Monte Carlo"])
    
    # Shock application
    shocked_threshold = threshold * (1 + shock/100)
    
    # Visualization
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=['Baseline', 'Shocked'],
        y=[threshold, shocked_threshold],
        mode='lines+markers',
        line=dict(color='#E76F51', width=3),
        marker=dict(size=12)
    ))
    fig.update_layout(
        title=f"Threshold Impact: {shock}% {scenario_type} Shock",
        yaxis_title="Threshold (%)",
        xaxis_title="Scenario"
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Shock details
    st.write(f"""
    - **Baseline Threshold**: {threshold:.2f}%
    - **Shock Applied**: {shock}% ({scenario_type})
    - **Resulting Threshold**: {shocked_threshold:.2f}%
    """)

# Download functionality
st.sidebar.download_button(
    label="Download Full Analysis",
    data=df.to_csv(index=False).encode('utf-8'),
    file_name='fx_volatility_analysis.csv',
    mime='text/csv'
)
